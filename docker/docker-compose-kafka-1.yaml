version: “3.8”

networks:
  kafka_network:

volumes:
  Kafka00:
    driver: local
  Kafka01:
    driver: local
  Kafka02:
    driver: local

services:
  Kafka00Service:
    image: bitnami/kafka:3.7.1
    restart: unless-stopped
    container_name: Kafka00Service
    ports:
      - “10000:9094"
    environment:
      # Kafka 브로커 토픽 자동 생성을 활성화하는지 여부 (true 또는 false)
      # - 클라이언트가 존재하지 않는 토픽에 메시지를 게시하거나 구독하려고 할 때 토픽을 자동으로 생성할지 여부를 나타낸다. 테스트 목적으로 true로 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

      #######################
      ###### KRAFT 설정 ######
      #######################

      # 고유 식별자 설정
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NODE_ID=0

      # 클러스터 설정 (공유 클러스터) - 모든 브로커가 같은 클러스터 ID를 공유해서 클러스터로 인식되도록 설정 (22글자로 맞춰줘야함)
      # Kafka Raft Mode 를 사용할 때는 클러스터 ID를 설정해야함
      - KAFKA_KRAFT_CLUSTER_ID=MyKafkaKraftClusterIDv

      # 컨트롤러 쿼럼 설정 (이 Raft 클러스터의 컨트롤러 쿼럼 구성원을 지정합니다.) - 클러스터 내의 모든 브로커가 컨트롤러 역할을 수행할 수 있음을 나타낸다.
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093

      # 브로커가 수행할 역할 정의 (controller, broker)
      - KAFKA_CFG_PROCESS_ROLES=controller,broker

      ##########################
      ###### LISTENER 설정 ######
      ##########################

      # 평문 통신을 허용하는지 여부 (yes 또는 no) - kafka는 통신을 암호화하기 위해 SSL/TLS를 사용할 수 있지만, 테스트 목적으로 평문 통신을 허용할 수 있다.
      - ALLOW_PLAINTEXT_LISTENER=yes

      # Kafka 브로커가 사용할 리스너 지정 - 브로커가 사용하는 리스너를 정의하고, 외부 클라이언트가 브로커에 연결할 때 사용할 주소를 지정한다.
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka00Service:9092,EXTERNAL://127.0.0.1:10000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

      # 컨트롤러 브로커의 리스너를 지정 하는데 사용. 클러스터에서 컨트롤러 역할을 수행하는 브로커가 어떤 네트워크 인터페이스를 통해 다른 브로커와 통신할 지 결정
      # - 컨트롤러 브로커가 다른 브로커와 통신할 때 : 0.0.0.0:9093 사용
      # - 클라이언트와의 통신 및 브로커 간의 기본 통신: 0.0.0.0:9092 사용
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      ############################
      ###### CLUSTERING 설정 ######
      ############################

      # 트랜잭션, Offset, Replication_Factor, ISR 설정 - 데이터의 내구성과 가용성을 보장하기 위해 설정
      # 오프셋 토픽의 복제 인수 설정. 오프셋 토픽은 컨슈머 그룹이 각 파티션의 현재 오프셋(마지막으로 읽은 위치)을 저장하는 데 사용됨.
      # - 오프셋 토픽의 복제 인수를 3으로 설정하면 오프셋 토픽의 각 파티션이 3개의 브로커에 복제됨. -> 데이터의 내구성 및 가용성을 보장
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3

      # 트랜잭션 상태 로그의 복제 인수 설정. 트랜잭션 상태 로그는 트랜잭션 상태를 저장하는 데 사용됨.
      # - 트랜잭션 상태 로그의 복제 인수를 3으로 설정하면 트랜잭션 상태 로그의 각 파티션이 3개의 브로커에 복제됨. -> 데이터의 내구성 및 가용성을 보장
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3

      # 기본 복제 인수 설정. 토픽이 생성될 때 기본 복제 인수를 사용함.
      # - 기본 복제 인수를 3으로 설정하면 새로운 토픽이 생성될 때 기본적으로 3개의 파티션에 저장됨.
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3

      # 트랜잭션 상태 로그의 최소 ISR (In-Sync Replica, 동기화 된 복제본) 수 설정.
      # ISR은 현재 리더와 동기화 된 복제본의 집합을 나타냄.
      # - 트랜잭션 상태 로그의 최소 ISR 수를 2로 설정하면 트랜잭션 상태 로그의 각 파티션이 최소 2개의 동기화된 복제본을 가져야 함을 의미.
      # - ISR 의 수가 설정된 최소 ISR 수보다 작아지면 해당 파티션에 새로운 메시지를 쓰지 않음.
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2

    networks:
      - kafka_network
    volumes:
      - Kafka00:/bitnami/kafka
      # - ./log4j.properties:/opt/bitnami/kafka/config/log4j.properties

  Kafka01Service:
    image: bitnami/kafka:3.7.1
    restart: unless-stopped
    container_name: Kafka01Service
    ports:
      - “10001:9094”
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

      #######################
      ###### KRAFT 설정 ######
      #######################
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=MyKafkaKraftClusterIDv
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker

      ##########################
      ###### LISTENER 설정 ######
      ##########################
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka01Service:9092,EXTERNAL://127.0.0.1:10001
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      ############################
      ###### CLUSTERING 설정 ######
      ############################
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
    networks:
      - kafka_network
    volumes:
      - Kafka01:/bitnami/kafka
      # - ./log4j.properties:/opt/bitnami/kafka/config/log4j.properties

  Kafka02Service:
    image: bitnami/kafka:3.7.1
    restart: unless-stopped
    container_name: Kafka02Service
    ports:
      - “10002:9094"
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

      #######################
      ###### KRAFT 설정 ######
      #######################
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=MyKafkaKraftClusterIDv
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker

      ##########################
      ###### LISTENER 설정 ######
      ##########################
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka02Service:9092,EXTERNAL://127.0.0.1:10002
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      ############################
      ###### CLUSTERING 설정 ######
      ############################
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
    networks:
      - kafka_network
    volumes:
      - Kafka02:/bitnami/kafka
      # - ./log4j.properties:/opt/bitnami/kafka/config/log4j.properties

  KafkaWebUiService:
    image: provectuslabs/kafka-ui:latest
    restart: always
    container_name: KafkaWebUiContainer
    ports:
      - “8085:8080” # 호스트의 8085 포트를 컨테이너의 8080 포트에 바인딩
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=Kafka00Service:9092,Kafka01Service:9092,Kafka02Service:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
    networks:
      - kafka_network
